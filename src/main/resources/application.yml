REDIS_HOST: ${REDIS_HOST_ENV:localhost}
REDIS_PORT: ${REDIS_PORT_ENV:6378}

server:
  port: 8080

spring:
  application:
    name: live-data-service

  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher

  datasource:
    username: sa
    password: ${DB_PASSWORD:}
    driverClassName: org.h2.Driver
    url: jdbc:h2:mem:${DB_NAME:MB_TEST};DB_CLOSE_DELAY=-1

  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      jedis:
        pool:
          max-active: 7
          max-idle: 7
          min-idle: 2
          max-wait: -1ms

  jpa:
    show-sql: ${SHOW_SQL_ENABLED:true}
    hibernate:
      ddl-auto: update

  flyway:
    enabled: true
    baseline-version: 0
    baseline-on-migrate: true
    schemas: LIVE_DATA
    table: schema_version
    validate-on-migrate: false

  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        web-allow-others: true

  kafka:
    consumer:
      bootstrap-servers: localhost:9092
      group-id: mb_group_id
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: '*'
    producer:
      bootstrap-servers: localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    dlt:
      backoff:
        max-interval: 2s
        max-retries: '4'
        multiplier: '1.5'
        initial-interval: 500ms
      deadletter:
        retention: 28d
        suffix: -dlt
      topic:
        retention: 7d

  docker:
    compose:
      enabled: true

  threads:
    virtual:
      enabled: true

  cloud:
    gcp:
      credentials:
        location: ${PLAY_INTEGRITY_API_CREDENTIALS_JSON:classpath:play-integrity-credentials.json}

management:
  endpoints:
    web:
      exposure:
        include: health, info, metrics, loggers, prometheus
  tracing:
    sampling:
      probability: 1.0

swagger:
  documentation:
    services:
      - name: live-data-service
        url: /v2/api-docs
        version: 2.0
      - name: live-data-service-2
        url: /v2/api-docs
        version: 2.0

redisson:
  enabled: true
  url: redis://${REDIS_HOST}:${REDIS_PORT}

services:
  token:
    store: redis

clients:
  # https://developer.android.com/google/play/integrity/overview
  play-integrity-api:
    credentials-file: ${PLAY_INTEGRITY_API_CREDENTIALS_JSON:play-integrity-credentials.json}
    application-name: project_id # project_id in play-integrity-credentials.json file

  json-placeholder:
    url: ${JSON_PLACEHOLDER_BASE_URL:https://jsonplaceholder.typicode.com}
    # client-id and client-secret are dummy values for this integration and were added to demonstrate the usage of BasicAuthenticationInterceptor
    client-id: ${JSON_PLACEHOLDER_CLIENT_ID:client-id}
    client-secret: ${JSON_PLACEHOLDER_CLIENT_SECRET:client-secret}

logstash:
  destination:
    url: localhost
    port: 5000
