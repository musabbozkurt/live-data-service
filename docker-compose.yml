services:
  #  live-data-service:
  #    image: "mb/live-data-service"
  #    restart: always
  #    ports:
  #      - "8080:8080"
  #    container_name: live-data-service

  postgres:
    container_name: postgredb
    image: postgres:16.6
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=test
      - POSTGRES_PASSWORD=test
      - POSTGRES_DB=localdb

  mongodb:
    image: mongo:8.0.4
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
    networks:
      - my-network

  prometheus:
    image: "prom/prometheus"
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./src/main/resources/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command: --web.enable-lifecycle --config.file=/etc/prometheus/prometheus.yml
    container_name: prometheus

  grafana:
    image: "grafana/grafana"
    restart: always
    ports:
      - "3000:3000"
    container_name: grafana

  broker:
    image: confluentinc/confluent-local:7.4.1
    hostname: broker
    container_name: broker
    ports:
      - "8082:8082"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092'

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    ports:
      - "9999:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: true
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"

  redis:
    image: redis:7.4.2
    container_name: redis
    restart: always
    ports:
      - "6378:6379" # Default port is 6379
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes

  redisinsight:
    image: redislabs/redisinsight:2.64.1
    restart: always
    container_name: redisinsight
    ports:
      - '8001:8001'

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.1
    container_name: elasticsearch
    environment:
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.type=single-node"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - elastic

  kibana:
    image: docker.elastic.co/kibana/kibana:8.17.1
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    depends_on:
      - elasticsearch
    networks:
      - elastic

  logstash:
    image: docker.elastic.co/logstash/logstash:8.17.1
    container_name: logstash
    volumes:
      - ./src/main/resources/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./src/main/resources/logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elastic
    depends_on:
      - elasticsearch

volumes:
  redis-data:
  elasticsearch_data:
    driver: local

networks:
  elastic:
    driver: bridge
  my-network:
    driver: bridge
